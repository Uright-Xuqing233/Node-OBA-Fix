name: "Release Binary"

on: push

jobs:
  build-tar-ball:
    name: "Build and Tar Ball"
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            artifact_name: "Node-OBA-Fix-linux-x86_64.tar.xz"
          - os: ubuntu-latest
            arch: aarch64
            artifact_name: "Node-OBA-Fix-linux-aarch64.tar.xz"
          - os: ubuntu-latest
            arch: armv7
            artifact_name: "Node-OBA-Fix-linux-armv7.tar.xz"
          - os: ubuntu-latest
            arch: armv7l
            artifact_name: "Node-OBA-Fix-linux-armv7l.tar.xz"            
          - os: macos-latest
            arch: x86_64
            artifact_name: "Node-OBA-Fix-macos-x86_64.tar.xz"
          - os: macos-latest
            arch: aarch64
            artifact_name: "Node-OBA-Fix-macos-aarch64.tar.xz"
          - os: windows-latest
            arch: x86_64
            artifact_name: "Node-OBA-Fix-windows-x86_64.tar.gz"
          - os: windows-latest
            arch: aarch64
            artifact_name: "Node-OBA-Fix-windows-aarch64.tar.gz"            

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      # QEMU arm
      - name: Set up QEMU
        if: matrix.arch == 'armv7' || matrix.arch == 'armv7l'
        uses: docker/setup-qemu-action@v3

      - name: Test
        if: matrix.arch == 'armv7' || matrix.arch == 'armv7l'
        run: |
          echo "Current system architecture: $(uname -m)"

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - run: npm i --no-package-lock
      - run: npm run build

      ## Linux & MacOS
      - run: |
          cp $(which node) .
          cp platforms/linux/run.sh .
          tar -caf ${{ matrix.artifact_name }} dist nginx package.json node_modules node run.sh
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')

      ## Windows
      - run: |
          $SRC = (Get-Command node.exe).Path
          copy $SRC node.exe
          copy platforms/windows/run.ps1 .
          tar -caf ${{ matrix.artifact_name }} dist package.json node_modules node.exe run.ps1
        if: matrix.os == 'windows-latest'

      - name: "Upload Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}

  build-update-zip:
    name: "Build Update Zip"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - run: npm i --no-package-lock
      - run: npm run build

      - name: "Create update.zip"
        run: |
          zip -r update.zip dist package.json

      - name: "Upload files"
        uses: actions/upload-artifact@v4
        with:
          name: update
          path: |
            dist
            package.json